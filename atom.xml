<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>GoodGuy&#39;blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://goodguy.cc/"/>
  <updated>2019-10-01T04:29:19.732Z</updated>
  <id>http://goodguy.cc/</id>
  
  <author>
    <name>GoodGuy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【转载】Android 外置 SD 卡写入权限问题</title>
    <link href="http://goodguy.cc/archives/text2.html"/>
    <id>http://goodguy.cc/archives/text2.html</id>
    <published>2019-10-01T04:24:09.000Z</published>
    <updated>2019-10-01T04:29:19.732Z</updated>
    
    <content type="html"><![CDATA[<p>最近升级到 Android 9.0 后，发现文件管理器在写入外置 SD 卡时出现了写入失败的问题，定位到 <code>File.canWrite()</code> 方法，发现返回了 <code>false</code>。经过讨论追踪定位，发现是由于 Google 的一个<a href="https://android.googlesource.com/platform/frameworks/base/+/86684240eb5753bb97c2cfc93d1d25fa1870f8f1%5E%21/#F1" target="_blank" rel="noopener">更改</a>导致的:</p><pre><code>diff --git a/data/etc/platform.xml b/data/etc/platform.xmlindex 04006b1..3021555 100644--- a/data/etc/platform.xml+++ b/data/etc/platform.xml@@ -62,7 +62,6 @@     &lt;permission name=&quot;android.permission.WRITE_MEDIA_STORAGE&quot; &gt;         &lt;group gid=&quot;media_rw&quot; /&gt;-        &lt;group gid=&quot;sdcard_rw&quot; /&gt;     &lt;/permission&gt;     &lt;permission name=&quot;android.permission.ACCESS_MTP&quot; &gt;diff --git a/services/core/java/com/android/server/pm/PackageManagerService.java b/services/core/java/com/android/server/pm/PackageManagerService.javaindex a0cb722..940d19f 100644--- a/services/core/java/com/android/server/pm/PackageManagerService.java+++ b/services/core/java/com/android/server/pm/PackageManagerService.java@@ -20936,9 +20936,6 @@                 if (Process.isIsolated(uid)) {                     return Zygote.MOUNT_EXTERNAL_NONE;                 }-                if (checkUidPermission(WRITE_MEDIA_STORAGE, uid) == PERMISSION_GRANTED) {-                    return Zygote.MOUNT_EXTERNAL_DEFAULT;-                }                 if (checkUidPermission(READ_EXTERNAL_STORAGE, uid) == PERMISSION_DENIED) {                     return Zygote.MOUNT_EXTERNAL_DEFAULT;                 }</code></pre><p>这里的修改移除了 <code>WRITE_MEDIA_STORAGE</code> 权限相关权限，导致了外部 SD 卡存储不可写的问题。</p><h2 id="平台签名应用受影响"><a href="#平台签名应用受影响" class="headerlink" title="平台签名应用受影响"></a><a href="#平台签名应用受影响" title="平台签名应用受影响"></a>平台签名应用受影响</h2><p>这个修改对系统应用影响较大，在 9.0 之前的平台，申请了 <code>WRITE_MEDIA_STORAGE</code> 的权限后，平台签名的应用就可以通过 <code>java.io.File</code> 接口写入外置 SD 卡了。但是这个修改之后，想要写入外置 SD 卡，就需要像第三方应用一样，使用 <code>DocumentFile</code> 的接口，可以阅读 API 文档 <a href="https://developer.android.com/guide/topics/providers/document-provider?hl=zh-cn" target="_blank" rel="noopener">存储访问框架</a> 和 <a href="https://developer.android.com/training/articles/scoped-directory-access?hl=zh-cn" target="_blank" rel="noopener">使用作用域目录访问</a> 。</p><p>参考 google 的这个 <a href="https://issuetracker.google.com/issues/113498210" target="_blank" rel="noopener">bug</a> ，平台类的应用，如文件管理器、相机、图库甚至 MediaProvider 都会出现外置 SD 卡只能读不可写，即写入失败的问题，因为这些系统应用都没有适配 <code>DocumentProvider</code> 的写入方式。</p><h2 id="DocumentFile-适配方案"><a href="#DocumentFile-适配方案" class="headerlink" title="DocumentFile 适配方案"></a><a href="#documentfile-适配方案" title="DocumentFile 适配方案"></a>DocumentFile 适配方案</h2><h3 id="1-请求写入外置-SD-卡权限"><a href="#1-请求写入外置-SD-卡权限" class="headerlink" title="1. 请求写入外置 SD 卡权限"></a><a href="#1-请求写入外置-sd-卡权限" title="1. 请求写入外置 SD 卡权限"></a>1. 请求写入外置 SD 卡权限</h3><p>早在 Android 4.4，Android 就已经加入了存储访问框架，外置 SD 卡的访问由 DocumentsUI (com.android.documentsui) 提供支持，经过 5.0 版本的完善以及 7.0 的改进，目前有两种请求外置 SD 卡写入权限的交互方法：</p><ul><li>Android 7.0 之前，使用 ACTION_OPEN_DOCUMENT_TREE 跳转到 DocumentsUI 的存储选择界面，之后用户手动打开外置存储并选择</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://busy.im/img/sdoperatestep.png" alt="手动选择 sd 卡提示" title>                </div>                <div class="image-caption">手动选择 sd 卡提示</div>            </figure><ul><li>Android 7.0 及之后，使用 <a href="https://developer.android.com/reference/android/os/storage/StorageVolume#createAccessIntent(java.lang.String" target="_blank" rel="noopener">StorageVolume.createAccessIntent(null)</a>) 跳转到权限写入提示框。(这个提示框也是 DocumentsUI 提供的，只是对之前的交互做了改进，避免繁琐的用户操作)</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://busy.im/img/screenshot2018-12-25-20-45-12.png" alt="新的权限提示框" title>                </div>                <div class="image-caption">新的权限提示框</div>            </figure><p>检查权限界面的属性，会发现这个权限提示框其实是 <code>com.android.documentsui/com.android.documentsui.ScopedAccessActivity</code></p><p>也就是说 DocumentsUI 为了简化权限请求的流程，已经特意做了一个权限的提示框。</p><p>而 <a href="https://developer.android.com/reference/android/os/storage/StorageVolume#createAccessIntent(java.lang.String" target="_blank" rel="noopener">StorageVolume.createAccessIntent(String directoryName)</a>) 可以传入众多媒体类型，包括音乐、图片、电影、文档等，如果传入参数为 <code>null</code> ，则表示整个外置存储分区。</p><p>Parameters</p><p><code>directoryName</code></p><p><code>String</code>: must be one of <code>Environment.DIRECTORY_MUSIC</code>, <code>Environment.DIRECTORY_PODCASTS</code>, <code>Environment.DIRECTORY_RINGTONES</code>, <code>Environment.DIRECTORY_ALARMS</code>, <code>Environment.DIRECTORY_NOTIFICATIONS</code>, <code>Environment.DIRECTORY_PICTURES</code>, <code>Environment.DIRECTORY_MOVIES</code>, <code>Environment.DIRECTORY_DOWNLOADS</code>, <code>Environment.DIRECTORY_DCIM</code>, or <code>Environment.DIRECTORY_DOCUMENTS</code>, or <code>null</code> to request access to the entire volume.</p><p>Returns</p><p><code>Intent</code></p><p>intent to request access, or <code>null</code> if the requested directory is invalid for that volume.</p><p><strong>权限请求及处理</strong></p><p>权限请求需要在 Activity 或者 Fragment 中发起，同时在 <code>onActivityResult</code> 中捕获返回的 <code>Uri</code>，这个 <code>Uri</code> 可以保存在本地存储中，方便再次调用。请求的代码封装如下：</p><pre><code>@Overridepublic void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    // ...    if (DocumentsUtils.checkWritableRootPath(getActivity(), rootPath)) {        showOpenDocumentTree();    }    // ...}private void showOpenDocumentTree() {    Intent intent = null;    if (android.os.Build.VERSION.SDK_INT &gt;= android.os.Build.VERSION_CODES.N) {        StorageManager sm = getActivity().getSystemService(StorageManager.class);        StorageVolume volume = sm.getStorageVolume(new File(rootPath));        if (volume != null) {            intent = volume.createAccessIntent(null);        }    }    if (intent == null) {        intent = new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);    }    startActivityForResult(intent, DocumentsUtils.OPEN_DOCUMENT_TREE_CODE);}@Overridepublic void onActivityResult(int requestCode, int resultCode, Intent data) {    super.onActivityResult(requestCode, resultCode, data);    switch (requestCode) {        case DocumentsUtils.OPEN_DOCUMENT_TREE_CODE:            if (data != null &amp;&amp; data.getData() != null) {                Uri uri = data.getData();                DocumentsUtils.saveTreeUri(getActivity(), rootPath, uri);            }            break;        default:            break;    }}</code></pre><p>这里的 <code>rootPath</code> 是上下文中传入的外置 sd 卡根目录，如 <code>/storage/0000-0000</code> 这样的路径，可以通过 <code>context.getExternalFilesDirs(&quot;external&quot;)</code> 方法获取到。<code>DocumentsUtils</code> 工具类的实现方法见下文。</p><p>其中 <code>DocumentsUtils.checkWritableRootPath()</code> 方法用来检查 SD 卡根目录是否有写入权限，如果没有则跳转到权限请求；<code>DocumentsUtils.saveTreeUri()</code> 方法保存返回的 <code>Uri</code> 信息到本地存储，以便之后查询。</p><h3 id="2-DocumentFile-文件操作封装"><a href="#2-DocumentFile-文件操作封装" class="headerlink" title="2. DocumentFile 文件操作封装"></a><a href="#2-documentfile-文件操作封装" title="2. DocumentFile 文件操作封装"></a>2. DocumentFile 文件操作封装</h3><p>由于之前应用使用了 <code>java.io.File</code> 接口操作外置 SD 卡文件，期望对代码的修改量最小，则最好的方式是对已有的 <code>File</code> 操作再做一次封装。</p><p>由于 Android 9.0 之前系统应用默认是可以通过 <code>java.io.File</code> 接口写入外置 SD卡 的，而如果作为公开市场第三方应用却在 4.4 之后就不可写，而且有的厂商定制版本 Android 9.0 外置 SD 卡也是可以直接写入而不需要 DocumentFile 接口，DocumentFile 接口也没有 <code>java.io.File</code> 效率高。</p><p><strong>所以最好的办法是先检查是否有文件写入权限，如果有写入权限，则直接使用 File 接口操作，如果没有权限再检查文件是否在外置 SD 卡，如果文件在 SD 卡则使用 DocumentFile 接口操作。</strong></p><p>封装的工具类 <code>DocumentsUtils</code> 方法说明，<strong>不兼容</strong> 表示没有封装 DocumentFile 操作：</p><p>DocumentsUtils 公共方法</p><p>功能描述</p><p>void cleanCache()</p><p>清除路径缓存，建议插拔 sd 卡后调用</p><p>boolean isOnExtSdCard(File file, Context c)</p><p>文件路径是否在外置 SD 卡上</p><p>DocumentFile getDocumentFile(final File file, final boolean isDirectory, Context context)</p><p>从 File 转到 DocumentFile</p><p>boolean mkdirs(Context context, File dir)</p><p>创建文件夹</p><p>boolean delete(Context context, File file)</p><p>删除文件</p><p>boolean canWrite(File file)</p><p>File 文件是否可写（如果文件不存在，则尝试创建文件再删除检查写入权限）<strong>不兼容</strong></p><p>boolean canWrite(Context context, File file)</p><p>文件是否可写</p><p>boolean renameTo(Context context, File src, File dest)</p><p>文件重命名</p><p>boolean saveTreeUri(Context context, String rootPath, Uri uri)</p><p>保存 path 和 uri 到本地存储</p><p>boolean checkWritableRootPath(Context context, String rootPath)</p><p>检查路径是否可写，不可写返回 true</p><p>InputStream getInputStream(Context context, File destFile)</p><p>获取 InputStream，可用于读操作</p><p>OutputStream getOutputStream(Context context, File destFile)</p><p>获取 OutputStream，可用于写操作</p><p>封装的工具类 <code>DocumentsUtils.java</code> 内容如下：</p><pre><code>public class DocumentsUtils {    private static final String TAG = DocumentsUtils.class.getSimpleName();    public static final int OPEN_DOCUMENT_TREE_CODE = 8000;    private static List&lt;String&gt; sExtSdCardPaths = new ArrayList&lt;&gt;();    private DocumentsUtils() {    }    public static void cleanCache() {        sExtSdCardPaths.clear();    }    /**     * Get a list of external SD card paths. (Kitkat or higher.)     *     * @return A list of external SD card paths.     */    @TargetApi(Build.VERSION_CODES.KITKAT)    private static String[] getExtSdCardPaths(Context context) {        if (sExtSdCardPaths.size() &gt; 0) {            return sExtSdCardPaths.toArray(new String[0]);        }        for (File file : context.getExternalFilesDirs(&quot;external&quot;)) {            if (file != null &amp;&amp; !file.equals(context.getExternalFilesDir(&quot;external&quot;))) {                int index = file.getAbsolutePath().lastIndexOf(&quot;/Android/data&quot;);                if (index &lt; 0) {                    Log.w(TAG, &quot;Unexpected external file dir: &quot; + file.getAbsolutePath());                } else {                    String path = file.getAbsolutePath().substring(0, index);                    try {                        path = new File(path).getCanonicalPath();                    } catch (IOException e) {                        // Keep non-canonical path.                    }                    sExtSdCardPaths.add(path);                }            }        }        if (sExtSdCardPaths.isEmpty()) sExtSdCardPaths.add(&quot;/storage/sdcard1&quot;);        return sExtSdCardPaths.toArray(new String[0]);    }    /**     * Determine the main folder of the external SD card containing the given file.     *     * @param file the file.     * @return The main folder of the external SD card containing this file, if the file is on an SD     * card. Otherwise,     * null is returned.     */    @TargetApi(Build.VERSION_CODES.KITKAT)    private static String getExtSdCardFolder(final File file, Context context) {        String[] extSdPaths = getExtSdCardPaths(context);        try {            for (int i = 0; i &lt; extSdPaths.length; i++) {                if (file.getCanonicalPath().startsWith(extSdPaths[i])) {                    return extSdPaths[i];                }            }        } catch (IOException e) {            return null;        }        return null;    }    /**     * Determine if a file is on external sd card. (Kitkat or higher.)     *     * @param file The file.     * @return true if on external sd card.     */    @TargetApi(Build.VERSION_CODES.KITKAT)    public static boolean isOnExtSdCard(final File file, Context c) {        return getExtSdCardFolder(file, c) != null;    }    /**     * Get a DocumentFile corresponding to the given file (for writing on ExtSdCard on Android 5).     * If the file is not     * existing, it is created.     *     * @param file        The file.     * @param isDirectory flag indicating if the file should be a directory.     * @return The DocumentFile     */    public static DocumentFile getDocumentFile(final File file, final boolean isDirectory,            Context context) {        if (Build.VERSION.SDK_INT &lt;= Build.VERSION_CODES.KITKAT) {            return DocumentFile.fromFile(file);        }        String baseFolder = getExtSdCardFolder(file, context);        boolean originalDirectory = false;        if (baseFolder == null) {            return null;        }        String relativePath = null;        try {            String fullPath = file.getCanonicalPath();            if (!baseFolder.equals(fullPath)) {                relativePath = fullPath.substring(baseFolder.length() + 1);            } else {                originalDirectory = true;            }        } catch (IOException e) {            return null;        } catch (Exception f) {            originalDirectory = true;            //continue        }        String as = PreferenceManager.getDefaultSharedPreferences(context).getString(baseFolder,                null);        Uri treeUri = null;        if (as != null) treeUri = Uri.parse(as);        if (treeUri == null) {            return null;        }        // start with root of SD card and then parse through document tree.        DocumentFile document = DocumentFile.fromTreeUri(context, treeUri);        if (originalDirectory) return document;        String[] parts = relativePath.split(&quot;/&quot;);        for (int i = 0; i &lt; parts.length; i++) {            DocumentFile nextDocument = document.findFile(parts[i]);            if (nextDocument == null) {                if ((i &lt; parts.length - 1) || isDirectory) {                    nextDocument = document.createDirectory(parts[i]);                } else {                    nextDocument = document.createFile(&quot;image&quot;, parts[i]);                }            }            document = nextDocument;        }        return document;    }    public static boolean mkdirs(Context context, File dir) {        boolean res = dir.mkdirs();        if (!res) {            if (DocumentsUtils.isOnExtSdCard(dir, context)) {                DocumentFile documentFile = DocumentsUtils.getDocumentFile(dir, true, context);                res = documentFile != null &amp;&amp; documentFile.canWrite();            }        }        return res;    }    public static boolean delete(Context context, File file) {        boolean ret = file.delete();        if (!ret &amp;&amp; DocumentsUtils.isOnExtSdCard(file, context)) {            DocumentFile f = DocumentsUtils.getDocumentFile(file, false, context);            if (f != null) {                ret = f.delete();            }        }        return ret;    }    public static boolean canWrite(File file) {        boolean res = file.exists() &amp;&amp; file.canWrite();        if (!res &amp;&amp; !file.exists()) {            try {                if (!file.isDirectory()) {                    res = file.createNewFile() &amp;&amp; file.delete();                } else {                    res = file.mkdirs() &amp;&amp; file.delete();                }            } catch (IOException e) {                e.printStackTrace();            }        }        return res;    }    public static boolean canWrite(Context context, File file) {        boolean res = canWrite(file);        if (!res &amp;&amp; DocumentsUtils.isOnExtSdCard(file, context)) {            DocumentFile documentFile = DocumentsUtils.getDocumentFile(file, true, context);            res = documentFile != null &amp;&amp; documentFile.canWrite();        }        return res;    }    public static boolean renameTo(Context context, File src, File dest) {        boolean res = src.renameTo(dest);        if (!res &amp;&amp; isOnExtSdCard(dest, context)) {            DocumentFile srcDoc;            if (isOnExtSdCard(src, context)) {                srcDoc = getDocumentFile(src, false, context);            } else {                srcDoc = DocumentFile.fromFile(src);            }            DocumentFile destDoc = getDocumentFile(dest.getParentFile(), true, context);            if (srcDoc != null &amp;&amp; destDoc != null) {                try {                    if (src.getParent().equals(dest.getParent())) {                        res = srcDoc.renameTo(dest.getName());                    } else if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.N) {                        res = DocumentsContract.moveDocument(context.getContentResolver(),                                srcDoc.getUri(),                                srcDoc.getParentFile().getUri(),                                destDoc.getUri()) != null;                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        }        return res;    }    public static InputStream getInputStream(Context context, File destFile) {        InputStream in = null;        try {            if (!canWrite(destFile) &amp;&amp; isOnExtSdCard(destFile, context)) {                DocumentFile file = DocumentsUtils.getDocumentFile(destFile, false, context);                if (file != null &amp;&amp; file.canWrite()) {                    in = context.getContentResolver().openInputStream(file.getUri());                }            } else {                in = new FileInputStream(destFile);            }        } catch (FileNotFoundException e) {            e.printStackTrace();        }        return in;    }    public static OutputStream getOutputStream(Context context, File destFile) {        OutputStream out = null;        try {            if (!canWrite(destFile) &amp;&amp; isOnExtSdCard(destFile, context)) {                DocumentFile file = DocumentsUtils.getDocumentFile(destFile, false, context);                if (file != null &amp;&amp; file.canWrite()) {                    out = context.getContentResolver().openOutputStream(file.getUri());                }            } else {                out = new FileOutputStream(destFile);            }        } catch (FileNotFoundException e) {            e.printStackTrace();        }        return out;    }    public static boolean saveTreeUri(Context context, String rootPath, Uri uri) {        DocumentFile file = DocumentFile.fromTreeUri(context, uri);        if (file != null &amp;&amp; file.canWrite()) {            SharedPreferences perf = PreferenceManager.getDefaultSharedPreferences(context);            perf.edit().putString(rootPath, uri.toString()).apply();            return true;        } else {            Log.e(TAG, &quot;no write permission: &quot; + rootPath);        }        return false;    }    public static boolean checkWritableRootPath(Context context, String rootPath) {        File root = new File(rootPath);        if (!root.canWrite()) {            if (DocumentsUtils.isOnExtSdCard(root, context)) {                DocumentFile documentFile = DocumentsUtils.getDocumentFile(root, true, context);                return documentFile == null || !documentFile.canWrite();            } else {                SharedPreferences perf = PreferenceManager.getDefaultSharedPreferences(context);                String documentUri = perf.getString(rootPath, &quot;&quot;);                if (documentUri == null || documentUri.isEmpty()) {                    return true;                } else {                    DocumentFile file = DocumentFile.fromTreeUri(context, Uri.parse(documentUri));                    return !(file != null &amp;&amp; file.canWrite());                }            }        }        return false;    }}</code></pre><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a><a href="#参考" title="参考"></a>参考</h2><p><a href="https://android.googlesource.com/platform/frameworks/base/+/86684240eb5753bb97c2cfc93d1d25fa1870f8f1%5E%21/#F1" target="_blank" rel="noopener">Media process should run with “write” access.</a></p><p><a href="https://issuetracker.google.com/issues/113498210" target="_blank" rel="noopener">[Developer Preview Android P]WRITE_MEDIA_STORAGE is not working for system apps to access the secondary storage.</a></p><p><a href="https://github.com/TeamAmaze/AmazeFileManager/blob/master/app/src/main/java/com/amaze/filemanager/filesystem/FileUtil.java" target="_blank" rel="noopener">AmazeFileManager/FileUtil.java</a></p><blockquote><p>原文：<a href="https://busy.im/post/android-sdcard-write/" target="_blank" rel="noopener">https://busy.im/post/android-sdcard-write/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近升级到 Android 9.0 后，发现文件管理器在写入外置 SD 卡时出现了写入失败的问题，定位到 &lt;code&gt;File.canWrite()&lt;/code&gt; 方法，发现返回了 &lt;code&gt;false&lt;/code&gt;。经过讨论追踪定位，发现是由于 Google 的一个&lt;a
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【转载】ANDROID中调用文件管理器并返回选中文件的路径</title>
    <link href="http://goodguy.cc/archives/text1.html"/>
    <id>http://goodguy.cc/archives/text1.html</id>
    <published>2019-09-29T10:58:15.000Z</published>
    <updated>2019-09-29T11:26:18.924Z</updated>
    
    <content type="html"><![CDATA[<p>实际项目中经常需要调用文件管理器，选择下载路径或者上传的本地文件路径。今天就给大家做个demo示范该功能的实现过程。</p><h1 id="一、实现效果预览"><a href="#一、实现效果预览" class="headerlink" title="一、实现效果预览"></a>一、实现效果预览</h1><p>以下为三星S6的样机测试效果，当然不同手机调用后的效果不一样。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://images2015.cnblogs.com/blog/1068139/201704/1068139-20170423095853116-868763186.gif" alt title>                </div>                <div class="image-caption"></div>            </figure></p><h1 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h1><p>布局文件很简单，就一个Button和TextView，这里不示范了，直接上实现代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line">package com.panhouye.selectfile;</span><br><span class="line"></span><br><span class="line">import android.annotation.SuppressLint;</span><br><span class="line">import android.app.Activity;</span><br><span class="line">import android.content.ContentUris;</span><br><span class="line">import android.content.Context;</span><br><span class="line">import android.content.Intent;</span><br><span class="line">import android.database.Cursor;</span><br><span class="line">import android.net.Uri;</span><br><span class="line">import android.os.Build;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.os.Environment;</span><br><span class="line">import android.provider.DocumentsContract;</span><br><span class="line">import android.provider.MediaStore;</span><br><span class="line">import android.support.v7.app.AppCompatActivity;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.widget.Button;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line">import android.widget.Toast;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line">    TextView tv;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Button btn = (Button) findViewById(R.id.btn);</span><br><span class="line">        tv = (TextView) findViewById(R.id.tv);</span><br><span class="line">        btn.setOnClickListener(new View.OnClickListener() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onClick(View v) &#123;</span><br><span class="line">                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);</span><br><span class="line">                //intent.setType(“image/*”);//选择图片</span><br><span class="line">                //intent.setType(“audio/*”); //选择音频</span><br><span class="line">                //intent.setType(“video/*”); //选择视频 （mp4 3gp 是android支持的视频格式）</span><br><span class="line">                //intent.setType(“video/*;image/*”);//同时选择视频和图片</span><br><span class="line">                intent.setType(&quot;*/*&quot;);//无类型限制</span><br><span class="line">                intent.addCategory(Intent.CATEGORY_OPENABLE);</span><br><span class="line">                startActivityForResult(intent, 1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    String path;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</span><br><span class="line">        if (resultCode == Activity.RESULT_OK) &#123;</span><br><span class="line">            Uri uri = data.getData();</span><br><span class="line">            if (&quot;file&quot;.equalsIgnoreCase(uri.getScheme()))&#123;//使用第三方应用打开</span><br><span class="line">                path = uri.getPath();</span><br><span class="line">                tv.setText(path);</span><br><span class="line">                Toast.makeText(this,path+&quot;11111&quot;,Toast.LENGTH_SHORT).show();</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            if (Build.VERSION.SDK_INT &gt; Build.VERSION_CODES.KITKAT) &#123;//4.4以后</span><br><span class="line">                path = getPath(this, uri);</span><br><span class="line">                tv.setText(path);</span><br><span class="line">                Toast.makeText(this,path,Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; else &#123;//4.4以下下系统调用方法</span><br><span class="line">                path = getRealPathFromURI(uri);</span><br><span class="line">                tv.setText(path);</span><br><span class="line">                Toast.makeText(MainActivity.this, path+&quot;222222&quot;, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getRealPathFromURI(Uri contentUri) &#123;</span><br><span class="line">        String res = null;</span><br><span class="line">        String[] proj = &#123; MediaStore.Images.Media.DATA &#125;;</span><br><span class="line">        Cursor cursor = getContentResolver().query(contentUri, proj, null, null, null);</span><br><span class="line">        if(null!=cursor&amp;&amp;cursor.moveToFirst())&#123;;</span><br><span class="line">            int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);</span><br><span class="line">            res = cursor.getString(column_index);</span><br><span class="line">            cursor.close();</span><br><span class="line">        &#125;</span><br><span class="line">        return res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 专为Android4.4设计的从Uri获取文件绝对路径，以前的方法已不好使</span><br><span class="line">     */</span><br><span class="line">    @SuppressLint(&quot;NewApi&quot;)</span><br><span class="line">    public String getPath(final Context context, final Uri uri) &#123;</span><br><span class="line"></span><br><span class="line">        final boolean isKitKat = Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT;</span><br><span class="line"></span><br><span class="line">        // DocumentProvider</span><br><span class="line">        if (isKitKat &amp;&amp; DocumentsContract.isDocumentUri(context, uri)) &#123;</span><br><span class="line">            // ExternalStorageProvider</span><br><span class="line">            if (isExternalStorageDocument(uri)) &#123;</span><br><span class="line">                final String docId = DocumentsContract.getDocumentId(uri);</span><br><span class="line">                final String[] split = docId.split(&quot;:&quot;);</span><br><span class="line">                final String type = split[0];</span><br><span class="line"></span><br><span class="line">                if (&quot;primary&quot;.equalsIgnoreCase(type)) &#123;</span><br><span class="line">                    return Environment.getExternalStorageDirectory() + &quot;/&quot; + split[1];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            // DownloadsProvider</span><br><span class="line">            else if (isDownloadsDocument(uri)) &#123;</span><br><span class="line"></span><br><span class="line">                final String id = DocumentsContract.getDocumentId(uri);</span><br><span class="line">                final Uri contentUri = ContentUris.withAppendedId(</span><br><span class="line">                        Uri.parse(&quot;content://downloads/public_downloads&quot;), Long.valueOf(id));</span><br><span class="line"></span><br><span class="line">                return getDataColumn(context, contentUri, null, null);</span><br><span class="line">            &#125;</span><br><span class="line">            // MediaProvider</span><br><span class="line">            else if (isMediaDocument(uri)) &#123;</span><br><span class="line">                final String docId = DocumentsContract.getDocumentId(uri);</span><br><span class="line">                final String[] split = docId.split(&quot;:&quot;);</span><br><span class="line">                final String type = split[0];</span><br><span class="line"></span><br><span class="line">                Uri contentUri = null;</span><br><span class="line">                if (&quot;image&quot;.equals(type)) &#123;</span><br><span class="line">                    contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">                &#125; else if (&quot;video&quot;.equals(type)) &#123;</span><br><span class="line">                    contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">                &#125; else if (&quot;audio&quot;.equals(type)) &#123;</span><br><span class="line">                    contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                final String selection = &quot;_id=?&quot;;</span><br><span class="line">                final String[] selectionArgs = new String[]&#123;split[1]&#125;;</span><br><span class="line"></span><br><span class="line">                return getDataColumn(context, contentUri, selection, selectionArgs);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // MediaStore (and general)</span><br><span class="line">        else if (&quot;content&quot;.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class="line">            return getDataColumn(context, uri, null, null);</span><br><span class="line">        &#125;</span><br><span class="line">        // File</span><br><span class="line">        else if (&quot;file&quot;.equalsIgnoreCase(uri.getScheme())) &#123;</span><br><span class="line">            return uri.getPath();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Get the value of the data column for this Uri. This is useful for</span><br><span class="line">     * MediaStore Uris, and other file-based ContentProviders.</span><br><span class="line">     *</span><br><span class="line">     * @param context       The context.</span><br><span class="line">     * @param uri           The Uri to query.</span><br><span class="line">     * @param selection     (Optional) Filter used in the query.</span><br><span class="line">     * @param selectionArgs (Optional) Selection arguments used in the query.</span><br><span class="line">     * @return The value of the _data column, which is typically a file path.</span><br><span class="line">     */</span><br><span class="line">    public String getDataColumn(Context context, Uri uri, String selection,</span><br><span class="line">                                String[] selectionArgs) &#123;</span><br><span class="line"></span><br><span class="line">        Cursor cursor = null;</span><br><span class="line">        final String column = &quot;_data&quot;;</span><br><span class="line">        final String[] projection = &#123;column&#125;;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            cursor = context.getContentResolver().query(uri, projection, selection, selectionArgs,</span><br><span class="line">                    null);</span><br><span class="line">            if (cursor != null &amp;&amp; cursor.moveToFirst()) &#123;</span><br><span class="line">                final int column_index = cursor.getColumnIndexOrThrow(column);</span><br><span class="line">                return cursor.getString(column_index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (cursor != null)</span><br><span class="line">                cursor.close();</span><br><span class="line">        &#125;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param uri The Uri to check.</span><br><span class="line">     * @return Whether the Uri authority is ExternalStorageProvider.</span><br><span class="line">     */</span><br><span class="line">    public boolean isExternalStorageDocument(Uri uri) &#123;</span><br><span class="line">        return &quot;com.android.externalstorage.documents&quot;.equals(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param uri The Uri to check.</span><br><span class="line">     * @return Whether the Uri authority is DownloadsProvider.</span><br><span class="line">     */</span><br><span class="line">    public boolean isDownloadsDocument(Uri uri) &#123;</span><br><span class="line">        return &quot;com.android.providers.downloads.documents&quot;.equals(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param uri The Uri to check.</span><br><span class="line">     * @return Whether the Uri authority is MediaProvider.</span><br><span class="line">     */</span><br><span class="line">    public boolean isMediaDocument(Uri uri) &#123;</span><br><span class="line">        return &quot;com.android.providers.media.documents&quot;.equals(uri.getAuthority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h1><p>这是调用系统自带的文件管理，无法保证和控制统一的界面显示，所以大家还是要实现与自己APP统一的文件管理界面，共勉。</p><blockquote><p>原文地址：<a href="http://www.cnblogs.com/panhouye/archive/2017/04/23/6751710.html" target="_blank" rel="noopener">http://www.cnblogs.com/panhouye/archive/2017/04/23/6751710.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;实际项目中经常需要调用文件管理器，选择下载路径或者上传的本地文件路径。今天就给大家做个demo示范该功能的实现过程。&lt;/p&gt;
&lt;h1 id=&quot;一、实现效果预览&quot;&gt;&lt;a href=&quot;#一、实现效果预览&quot; class=&quot;headerlink&quot; title=&quot;一、实现效果预览&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>六百块钱买的松人显示器质量如何</title>
    <link href="http://goodguy.cc/archives/evaluation1.html"/>
    <id>http://goodguy.cc/archives/evaluation1.html</id>
    <published>2018-05-02T04:31:00.000Z</published>
    <updated>2019-09-30T14:51:21.233Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/02/05/9ujrNj.md.jpg" alt="9ujrNj.md.jpg" title>                </div>                <div class="image-caption">9ujrNj.md.jpg</div>            </figure><ul><li>一般IPS显示器24寸都要1000+</li><li>松人作为国产中的山寨战斗机一直有莫名的性价比</li><li>于是上了一波车</li></ul></blockquote><h3 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/02/05/9uj6Cn.md.jpg" alt="9uj6Cn.md.jpg" title>                </div>                <div class="image-caption">9uj6Cn.md.jpg</div>            </figure><p>这玩意还有赠品…<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/02/05/9uj0Hg.md.jpg" alt="9uj0Hg.md.jpg" title>                </div>                <div class="image-caption">9uj0Hg.md.jpg</div>            </figure><br>内部还是相当简陋的</p><h3 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h3><ul><li>乍一看上去好像还可以，是完美屏<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/02/05/9ujc3q.md.jpg" alt="9ujc3q.md.jpg" title>                </div>                <div class="image-caption">9ujc3q.md.jpg</div>            </figure></li><li>但是好像还是有点灰蒙蒙的（其实是英伟达显卡驱动识别默认以有限灰阶输出的锅，调整一下就好很多）</li></ul><h3 id="关键问题"><a href="#关键问题" class="headerlink" title="关键问题"></a>关键问题</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/02/05/9uj2vV.md.jpg" alt="9uj2vV.md.jpg" title>                </div>                <div class="image-caption">9uj2vV.md.jpg</div>            </figure><blockquote><p>很明显的做工问题<br>低端ips没想到还是有很明显的拖影<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/02/05/9ujgg0.md.jpg" alt="9ujgg0.md.jpg" title>                </div>                <div class="image-caption">9ujgg0.md.jpg</div>            </figure><br>拖影问题相当影响游戏观感，不过在亮色环境下不明显<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/02/05/9ujWuT.md.jpg" alt="9ujWuT.md.jpg" title>                </div>                <div class="image-caption">9ujWuT.md.jpg</div>            </figure><br>实际上拖影是因为灰阶响应较慢的问题(va软屏面板尤为严重），某船笔记本也有这类问题（程度较轻一些）<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/02/05/9ujDEQ.md.jpg" alt="9ujDEQ.md.jpg" title>                </div>                <div class="image-caption">9ujDEQ.md.jpg</div>            </figure><br>简陋的OSD<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2018/02/05/9ujIUJ.md.jpg" alt="9ujIUJ.md.jpg" title>                </div>                <div class="image-caption">9ujIUJ.md.jpg</div>            </figure></p></blockquote><h3 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h3><p>之后我退换了一款松人999人民币165hz的25寸1080p，拖影算是没有了，不过面板不是完美屏了，有一个亮点（边缘不算太影响，补贴30r），依旧做有工问题。<br>有钱还是买好一些的显示器吧-。 -</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;im
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>神舟Z8-SP7D1拆机换网卡以及硅脂</title>
    <link href="http://goodguy.cc/archives/skill3.html"/>
    <id>http://goodguy.cc/archives/skill3.html</id>
    <published>2017-11-15T14:03:00.000Z</published>
    <updated>2019-09-30T14:52:16.582Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>神舟Z8-SP7D1是蓝天的P650RS模具</li><li>散热模块采用三风扇+5热管的组合，但是由于较薄，散热一般</li><li>神舟一贯作风便是缩水网卡屏幕，以及原厂硅脂涂抹比较玄学（<del>瞎涂</del>）</li></ul></blockquote><h4 id="吐槽："><a href="#吐槽：" class="headerlink" title="吐槽："></a>吐槽：</h4><p>z8采用的无线网卡是M2接口的英特尔3165AC网卡，自带蓝牙4.0，支持双频但是信号质量一般而且最高速度只有433Mbps，<br>天线实际利用是1x1(因此虽然有俩天线但有一根天线是备用<del>摆设</del>)。</p><h3 id="换网卡："><a href="#换网卡：" class="headerlink" title="换网卡："></a>换网卡：</h3><h4 id="网卡由于是NGFF-M2接口，所以说换起来还是很容易，大多数的M2接口的网卡都可以换，本文以8265AC为例。（安装前最好先卸载旧网卡驱动）"><a href="#网卡由于是NGFF-M2接口，所以说换起来还是很容易，大多数的M2接口的网卡都可以换，本文以8265AC为例。（安装前最好先卸载旧网卡驱动）" class="headerlink" title="网卡由于是NGFF/M2接口，所以说换起来还是很容易，大多数的M2接口的网卡都可以换，本文以8265AC为例。（安装前最好先卸载旧网卡驱动）"></a>网卡由于是NGFF/M2接口，所以说换起来还是很容易，大多数的M2接口的网卡都可以换，本文以8265AC为例。（安装前最好先卸载旧网卡驱动）</h4><ul><li>打开后盖后找到网卡位置<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/11/15/6x7Os.md.png" alt="6x7Os.md.png" title>                </div>                <div class="image-caption">6x7Os.md.png</div>            </figure></li><li>拔出天线和旧网卡（有点紧）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/11/15/6xbmn.md.png" alt="6xbmn.md.png" title>                </div>                <div class="image-caption">6xbmn.md.png</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/11/15/6xqwq.md.png" alt="6xqwq.md.png" title>                </div>                <div class="image-caption">6xqwq.md.png</div>            </figure></li><li>原样安装即可（安装好天线，注意1 2接口不要安错）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/11/15/6xTyj.md.png" alt="6xTyj.md.png" title>                </div>                <div class="image-caption">6xTyj.md.png</div>            </figure></li></ul><h3 id="换硅脂："><a href="#换硅脂：" class="headerlink" title="换硅脂："></a>换硅脂：</h3><h4 id="GTX1070发热大户，神舟装配工人居然有一大半几乎没抹上硅脂，怪不得直逼90-。"><a href="#GTX1070发热大户，神舟装配工人居然有一大半几乎没抹上硅脂，怪不得直逼90-。" class="headerlink" title="GTX1070发热大户，神舟装配工人居然有一大半几乎没抹上硅脂，怪不得直逼90++。"></a>GTX1070发热大户，神舟装配工人居然有一大半几乎没抹上硅脂，怪不得直逼90++。</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/11/15/6xfFf.md.jpg" alt="6xfFf.md.jpg" title>                </div>                <div class="image-caption">6xfFf.md.jpg</div>            </figure><ul><li>cpu原厂硅脂还好<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/11/15/6xhY8.md.jpg" alt="6xhY8.md.jpg" title>                </div>                <div class="image-caption">6xhY8.md.jpg</div>            </figure></li><li>散热模具（拆卸顺序按照散热模具上标识的数字即可）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/11/15/6x4fS.md.jpg" alt="6x4fS.md.jpg" title>                </div>                <div class="image-caption">6x4fS.md.jpg</div>            </figure></li><li>清理后重新抹上7783导热硅脂<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/11/15/6xolQ.md.jpg" alt="6xolQ.md.jpg" title>                </div>                <div class="image-caption">6xolQ.md.jpg</div>            </figure></li><li>完成<br>细节（这里必须先拆卸这个横梁）<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/11/15/6zepD.md.jpg" alt="6zepD.md.jpg" title>                </div>                <div class="image-caption">6zepD.md.jpg</div>            </figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;神舟Z8-SP7D1是蓝天的P650RS模具&lt;/li&gt;
&lt;li&gt;散热模块采用三风扇+5热管的组合，但是
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>如何不使用第三方的情况下解决bilibili客户端离线下载新番版权受限问题</title>
    <link href="http://goodguy.cc/archives/skill2.html"/>
    <id>http://goodguy.cc/archives/skill2.html</id>
    <published>2017-10-14T14:03:00.000Z</published>
    <updated>2019-09-30T14:51:53.783Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>哔哩哔哩（B站）是众所周知的 ACG <del>二刺螈</del> 网站</li><li>由于大版权时代的来临，连部分有版权的新番也无法离线下载</li><li>在这里写出如何不使用第三方插件或解析软件的前提下进行离线</li></ul></blockquote><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><p>利用不同地区的版权限制使用VPN或SS代理获得离线权</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><ul><li>不需要第三方插件或解析软件，直接通过B站官方客户端下载</li><li>与此同时bilime之类的解析软件长时间不更新而失效</li><li>开启VPN加入到下载列表后可以退出代理继续满速下载</li></ul><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><p>挂代理之前：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/10/10/8PNOs.md.jpg" alt="8PNOs.md.jpg" title>                </div>                <div class="image-caption">8PNOs.md.jpg</div>            </figure></p><blockquote><p>这个时候打开代理（如赛风或者SSR SS）<br>使用荷兰或者俄罗斯节点<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/10/10/8PYlQ.md.jpg" alt="8PYlQ.md.jpg" title>                </div>                <div class="image-caption">8PYlQ.md.jpg</div>            </figure><br>然后重新打开哔哩哔哩客户端，发现已经可以下载<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/10/10/8Pamn.md.jpg" alt="8Pamn.md.jpg" title>                </div>                <div class="image-caption">8Pamn.md.jpg</div>            </figure><br>添加进入下载列表，退出代理继续下载即可<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/10/10/8Ptyj.md.jpg" alt="8Ptyj.md.jpg" title>                </div>                <div class="image-caption">8Ptyj.md.jpg</div>            </figure></p><h4 id="特别注意：必须使用荷兰或者俄罗斯节点（其他如美国日本节点不行），当然部分其他国家节点也许可以"><a href="#特别注意：必须使用荷兰或者俄罗斯节点（其他如美国日本节点不行），当然部分其他国家节点也许可以" class="headerlink" title="特别注意：必须使用荷兰或者俄罗斯节点（其他如美国日本节点不行），当然部分其他国家节点也许可以"></a>特别注意：必须使用荷兰或者俄罗斯节点（其他如美国日本节点不行），当然部分其他国家节点也许可以</h4></blockquote><h3 id="附加："><a href="#附加：" class="headerlink" title="附加："></a>附加：</h3><p>此方法截止2017.10.14有效，不保证以后依然有效，对于绝大部分限制离线版权番都一样有效</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;哔哩哔哩（B站）是众所周知的 ACG &lt;del&gt;二刺螈&lt;/del&gt; 网站&lt;/li&gt;
&lt;li&gt;由于大版权
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>记一次 魅族路由器极速版 刷Padavan固件经历</title>
    <link href="http://goodguy.cc/archives/skill1.html"/>
    <id>http://goodguy.cc/archives/skill1.html</id>
    <published>2017-09-30T14:03:00.000Z</published>
    <updated>2019-09-30T14:49:39.485Z</updated>
    
    <content type="html"><![CDATA[<blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>魅族路由器不同于小米路由器或是极路由以及newifi之类的热门路由。</li><li>网络上关于魅族路由器极速版的刷机教程凤毛麟角，可以说是几乎没有。</li><li>前不久好不容易找到关于魅族路由器极速版刷Padavan的方法，于是乎记录下来。</li></ul></blockquote><h3 id="所需文件地址："><a href="#所需文件地址：" class="headerlink" title="所需文件地址："></a>所需文件地址：</h3><p>Padavan固件：<a href="https://coding.net/u/c0ding/p/p4davan-fw/git/raw/master/down/rom/MZ-R18/MZ-R18_3.4.3.9-099.trx" target="_blank" rel="noopener">https://coding.net/u/c0ding/p/p4davan-fw/git/raw/master/down/rom/MZ-R18/MZ-R18_3.4.3.9-099.trx</a><br>其他（tftp32以及原厂固件）：<a href="https://pan.baidu.com/s/1c2lMfRE" target="_blank" rel="noopener">https://pan.baidu.com/s/1c2lMfRE</a></p><h4 id="关于Padavang固件"><a href="#关于Padavang固件" class="headerlink" title="关于Padavang固件"></a>关于Padavang固件</h4><ul><li>由华硕固件魔改而成，俗称老毛子固件。</li><li>操作界面繁琐，功能丰富。</li><li>集成了部分特殊插件。</li></ul><h3 id="刷机方法"><a href="#刷机方法" class="headerlink" title="刷机方法"></a>刷机方法</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/09/30/1naCt.jpg" alt="1" title>                </div>                <div class="image-caption">1</div>            </figure><blockquote><p>1、最好将杀毒软件关掉，有时候tftp32.exe程序可能会被杀毒软件误杀<br>2、如果是win7或以上的系统，工具和固件最好不要放在C盘，防止被UAC等防火墙禁掉<br>3、请确保电脑网卡设置成了10.10.10.3的地址，以前有用户误将宽带拨号的网络标示当成网卡来设置了<br>4、上电后松开按钮的时间不能太晚也不能太早，太晚或太早都会导致TFTP无反应，升级不成功</p><h2 id="特别注意：进入救援模式（刷机模式）时务必记住先断开电源（拔掉电源线），之后按住wps按键不放，然后接通电源线，等待4-7秒后松手。"><a href="#特别注意：进入救援模式（刷机模式）时务必记住先断开电源（拔掉电源线），之后按住wps按键不放，然后接通电源线，等待4-7秒后松手。" class="headerlink" title="特别注意：进入救援模式（刷机模式）时务必记住先断开电源（拔掉电源线），之后按住wps按键不放，然后接通电源线，等待4-7秒后松手。"></a>特别注意：进入救援模式（刷机模式）时务必记住先断开电源（拔掉电源线），之后按住wps按键不放，然后接通电源线，等待4-7秒后松手。</h2></blockquote><p>在TFTP出现路由请求接收固件文件成功后，等待3分钟以上，重启路由器即可。<br>成功后可以登录192.168.99.1（一般是）进入web管理，默认管理账户admin密码admin，wifi密码1234567890。<br>看见如下界面说明成功。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/09/30/1nHa9.jpg" alt="2" title>                </div>                <div class="image-caption">2</div>            </figure></p><h3 id="后记："><a href="#后记：" class="headerlink" title="后记："></a>后记：</h3><p>魅族路由器可玩性并不高，不打折的情况下不推荐购买。虽然如此，依然有人适配（虽然不知道是不是只是随便改改）固件，也许在网上多试一试其他该解决方案的通用固件刷一刷（作死）也未尝不可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;魅族路由器不同于小米路由器或是极路由以及newifi之类的热门路由。&lt;/li&gt;
&lt;li&gt;网络上关于魅族
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【工具推荐】 RPG Maker MV</title>
    <link href="http://goodguy.cc/archives/tool3.html"/>
    <id>http://goodguy.cc/archives/tool3.html</id>
    <published>2017-09-23T14:03:00.000Z</published>
    <updated>2019-09-30T14:53:00.352Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><img src="https://s1.ax1x.com/2017/09/23/QUBnI.jpg" alt="1"></p><p>RPG Maker MV 是专为制作角色扮演游戏而生的制作工具。<br>本作的游戏将输出为 HTML5 格式，使用这一格式，完成的游戏将可以发布在 Windows、Mac OS X、安卓、iOS平台，甚至作为网页游戏在线发布。<br>汉化中文帮助文档 <a href="http://help.rpgmakermv.cn/" target="_blank" rel="noopener">http://help.rpgmakermv.cn/</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/09/23/QUR3Q.jpg" alt="1" title>                </div>                <div class="image-caption">1</div>            </figure><p>RPG Maker 系列前作有 RPG Maker 2000，RPG Maker 2003，RPG Maker XP，RPG Maker VX，RPG Maker VX Ace</p><p>RPG Maker MV和系列前作相比，《RPG制作大师MV》将是系列史上功能最强大的一作，新作包含下列特性——<br>传统的脚本编辑器已经移除，取而代之的将是一个更简单的脚本管理工具，使用简单的JavaScript。实现了原来的第三方脚本特性的原生化集成，游戏运行效率也大大提升。<br>数据库内容的最大值增加，道具上限大幅提升，技能、物品、武器、防具、敌人和敌群数据最多都可达到2000条；数据库脚本数据编辑更加方便。<br>本作的游戏将输出为 HTML5 格式。使用这一格式，完成的游戏能发布在 Windows、Mac OS X、安卓、iOS平台，甚至作为网页游戏在线发布。<br>允许通过拉伸窗口调整游戏画面的大小；游戏运行分辨率高由544×416提升至816×624，图块大小由32扩大到48，画质大幅提升。<br>事件选项的最大个数从4个增加到了6个，允许设置选项窗口的位置和不透明度；新增事件搜索工具，优化事件编辑器。保留前作纵版战斗的基础上新增横版战斗模式，同时优化战斗细节。<br>自动三层级地图；地图区域数量上限扩大到255。</p><p>更加丰富（？）的内置素材（DLC？）<br>游戏初始菜单新增游戏设置指令。<br>新增声场控制，音效控制优化。<br>同时支持触控和鼠标操作。<br>纸娃娃生成器优化。<br>……  <del>以上都出自于百度百科以及帮助文档</del></p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/09/23/QU29g.jpg" alt="1" title>                </div>                <div class="image-caption">1</div>            </figure><h1 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h1><p>  不需要编程基础，但是会编程能如虎添翼（插件采用javascript编写）<br>  丰富多彩的插件系统<br>  编写效率远高于一般引擎<br>  UI界面对萌新非常友好<br>  支持多平台！！</p><h1 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h1><p>  编译后的安装包臃肿<br>  自由度比一般引擎低，对于联机等功能乏力<br>  受到业界dalao歧视</p><h3 id="为什么购买它"><a href="#为什么购买它" class="headerlink" title="为什么购买它"></a>为什么购买它</h3><p>RPG Maker MV 于 steam 上架，本体原价 204 RMB ，G胖打折 off-70% = 买买买！！</p><p>RPG Maker MV比不上Unity3d，但也绝非橙光游戏之流，虽然人气低迷（66RPG也要关了），但他依旧能圆你的游戏梦。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s1.ax1x.com/2017/09/23/Q6fiR.jpg" alt="1" title>                </div>                <div class="image-caption">1</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2017/09/23/QUBnI.jpg&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;
&lt;p&gt;RP
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【工具推荐】 神经卷积网络图片放大-waifu2x</title>
    <link href="http://goodguy.cc/archives/tool2.html"/>
    <id>http://goodguy.cc/archives/tool2.html</id>
    <published>2017-09-07T14:03:00.000Z</published>
    <updated>2019-09-30T14:52:39.222Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>使用卷积神经网络对动漫风格的图片进行放大操作（支持照片），<br>是一套自带像素填充与降噪的算法。</p><p>目前拥有多个版本<br>在线网页版本：<a href="http://waifu2x.udp.jp/" target="_blank" rel="noopener">http://waifu2x.udp.jp/</a><br>Git站caffe版本源码：<a href="https://github.com/lltcggie/waifu2x-caffe" target="_blank" rel="noopener">https://github.com/lltcggie/waifu2x-caffe</a></p><p>waifu2x同时支持CUAD cuDNN 和CPU多个模式</p><h3 id="影响"><a href="#影响" class="headerlink" title="影响"></a>影响</h3><p>目前二次元界最好用的图片黑科技之一，可以结合VapouSynth优雅地调用Waifu2x处理视频（被国内某知名字幕组如 <del>魔穗</del> 采用）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://8.pic.pc6.com/thumb/up/2016-7/2016729115359960979188638250_600_0.jpg" alt="1" title>                </div>                <div class="image-caption">1</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://8.pic.pc6.com/thumb/up/2016-7/2016729127208759758077417130_600_0.jpg" alt="1" title>                </div>                <div class="image-caption">1</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;使用卷积神经网络对动漫风格的图片进行放大操作（支持照片），&lt;br&gt;是一套自带像素填充与降噪的算法。&lt;/p&gt;
&lt;p&gt;目前拥有多个版本&lt;br&gt;在
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>【工具推荐】 音视频压制处理软件-小丸工具箱</title>
    <link href="http://goodguy.cc/archives/tool1.html"/>
    <id>http://goodguy.cc/archives/tool1.html</id>
    <published>2017-09-07T12:54:00.000Z</published>
    <updated>2019-09-30T14:53:23.221Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>小丸工具箱是一款用于处理音视频等多媒体文件的软件。<br>是一款x264、ffmpeg等命令行程序的图形界面。<br>它的目标是让视频压制变得简单、轻松。</p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><p>高质量的H264+AAC视频压制（同时也支持实验性的h265编码）<br>ASS/SRT字幕内嵌到视频<br>AAC/WAV/FLAC/ALAC音频转换<br>MP4/MKV/FLV的无损抽取和封装<br>官网：<a href="http://maruko.appinn.me/" target="_blank" rel="noopener">http://maruko.appinn.me/</a></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://maruko.appinn.me/image/wan.png" alt title>                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;小丸工具箱是一款用于处理音视频等多媒体文件的软件。&lt;br&gt;是一款x264、ffmpeg等命令行程序的图形界面。&lt;br&gt;它的目标是让视频压制变
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
